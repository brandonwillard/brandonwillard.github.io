#+NAME: org-ref-adjustments
#+BEGIN_SRC elisp :eval export-only :exports none :results none
;;
;; Run `org-publish-current-file' to write the .md file.
;;

;; Add a format for "misc" reference types.
(setq org-ref-bibliography-entry-format
          (add-to-list 'org-ref-bibliography-entry-format
                       '("misc" . "%a, %t, <i>%j</i>, %p (%y). <a href=\"%U\">link</a>.")))

(defmacro create-org-ref-generic-format-function (link-type)
  "A macro that turns `org-ref-format-*' functions into a generic methods, so
 that they're easier to extend."
  (pcase (macroexpand-1 `(org-ref-make-format-function ,link-type))
    (`(defun ,name ,args ,doc . ,body)
     `(cl-defgeneric ,name ,args ,@body))))

;; (fmakunbound #'org-ref-format-citet)
;; (fmakunbound #'org-ref-format-citep)
;; (fmakunbound #'btw--create-md-link)

(create-org-ref-generic-format-function "citet")
(create-org-ref-generic-format-function "citep")

(defun* btw--create-md-link (key &optional parens)
  "A custom Markdown formatting for references."
     (format "<a href=\"#%s\">%s</a>"
             (md5 key)
             (let ((org-ref-bibliography-files (org-ref-find-bibliography))
                   (bib-file)
                   (author)
                   (year)
                   (entry)
                   (bibtex-entry))
               (setq bib-file (catch 'result
                            (cl-loop for file in org-ref-bibliography-files do
                                     (if (org-ref-key-in-file-p key
                                                                (file-truename file))
                                         (throw 'result file)
                                       (message "%s not found in %s"
                                                key
                                                (file-truename file))))))
               (with-temp-buffer
                 (insert-file-contents bib-file)
                 (bibtex-set-dialect (parsebib-find-bibtex-dialect)
                                     t)
                 (bibtex-search-entry key nil 0)
                 (setq bibtex-entry (bibtex-parse-entry))
                 (dolist (cons-cell bibtex-entry)
                   (setf (car cons-cell) (downcase (car cons-cell))))
                 (setq author (cdr (assoc "author" bibtex-entry)))
                 (setq year (cdr (assoc "year" bibtex-entry)))
                 (setq entry
                       (if parens
                           (format "(%s %s)" author year)
                         (format "%s (%s)" author year))))
               (replace-regexp-in-string "[\"\{\}]"
                                         ""
                                         (htmlize-escape-or-link entry)))))


;; These versions use `org-ref' for formatting.
(cl-defmethod org-ref-format-citet (keyword desc (format (eql md)))
  "A specialized method for citet (textual) links/references with Markdown
 formatting."
  (mapconcat #'btw--create-md-link
             (s-split "," keyword)
             ", "))

(cl-defmethod org-ref-format-citep (keyword desc (format (eql md)))
  "A specialized method for citep (parenthetical) links/references with Markdown
 formatting."
  (mapconcat (lambda (x) (btw--create-md-link x t))
             (s-split "," keyword)
             ", "))

;; (cl-defmethod org-ref-format-citet (keyword desc (format (eql md)))
;;   "Use Pandoc's citation formatting instead of `org-ref''s."
;;   (mapconcat (lambda (key) (format "@%s" key))
;;              (s-split "," keyword)
;;              ", "))

;; (cl-defmethod org-ref-format-citep (keyword desc (format (eql md)))
;;   "Use Pandoc's citation formatting instead of `org-ref''s."
;;   (mapconcat (lambda (key) (format "[@%s]" key))
;;              (s-split "," keyword)
;;              ", "))

;; Test 'em out.
;; (org-ref-format-citet "WillardProgrammingIntelligentCity2018a" nil 'html)
;; (org-ref-format-citet "WillardSymbolicMathPyMC32018" nil 'md)
#+END_SRC

#+NAME: org-md-export-adjustments
#+BEGIN_SRC elisp :eval export-only :exports none :results none
;;
;; An override that transcodes paragraphs/sections as custom divs.
;;
(defun btw--org-md-section (old-fun paragraph contents info)
  ;; TODO: Set `:type' in `info' to th
  (let ((block-type (org-element-property :type paragraph)))
    (if block-type
        (org-html-special-block paragraph contents info)
      (funcall old-fun paragraph contents info))))

(advice-add #'org-md-section :around #'btw--org-md-section)

;;
;; Customize the output of markdown image links.
;;
(defun btw--org-md-link (old-fun link contents info)
  (if (org-export-inline-image-p link org-html-inline-image-rules)
      (let* ((type (org-element-property :type link))
             (path (let ((raw-path (org-element-property :path link)))
                     (cond
                      ((not (equal "file" type))
                       (concat type ":" raw-path))
                      ((not (file-name-absolute-p raw-path)) raw-path)
                      (t (expand-file-name raw-path)))))
             (caption (org-export-data (org-export-get-caption
                                        (org-export-get-parent-element link))
                                       info))
             ;; TODO: Generate IDs with the following:
             ;; (fig-num
             ;;  (or (org-element-property :CUSTOM_ID destination)
             ;;      (org-export-get-reference destination info)))
             (link-name (org-element-property :name
                                              (org-element-property :parent link))))
        (format
         ;; TODO:
         ;; --This 1 needs to be the #+NAME (e.g. "fig:pg_path_plot").
         (s-join " "
                 '("<figure id=\"%1$s\">"
                   ;; "<span id=\"%1$s_span\" style=\"display:none;visibility:hidden\">"
                   ;; "$$\begin{equation}"
                   ;; --This one a unique number ID.
                   ;; "\tag{%2$s}"
                   ;; "\label{%1$s}"
                   ;; "\end{equation}$$"
                   ;; "</span>"
                   "![%2$s \\label{%1$s}](%3$s)"
                   "<figcaption>%2$s</figcaption>"
                   "</figure>"))
         link-name
         ;; fig-num
         ;; (format "<span data-label=\"%s\"></span>" caption)
         caption
         (if (org-export-derived-backend-p org-export-current-backend 'md)
             ;;(not (org-string-nw-p caption))
             ;; Adjust the image filename to work with Pelican.
             (format "{attach}/%s"
                     (file-relative-name path
                                         (f-join (projectile-project-root)
                                                 "content")))
             path
           (format "%s \"%s\"" path caption))))
    (funcall old-fun link contents info)))

(advice-add #'org-md-link :around #'btw--org-md-link)


(defun btw--org-gfm-src-block (old-fun src-block contents info)
  "Allow attributes (only name, for now) in fenced code block definitions.

E.g., '```{#block-name .python}'

For Pandoc, use with 'fenced_code_attributes'
"
  (let* ((lang (org-element-property :language src-block))
         (code (org-export-format-code-default src-block info))
         (link-id (org-export-get-reference src-block info))
         ;; (name (org-element-property :name src-block))
         (prefix (if link-id
                     ;; TODO: Add a class for result blocks?
                     (concat "```{#" link-id " ." lang "}\n")
                   (concat "```{." lang "}\n")))
         (suffix "```"))
    (concat prefix code suffix)))

(advice-add #'org-gfm-src-block :around #'btw--org-gfm-src-block)

#+END_SRC

#+NAME: org-html-export-modifications
#+BEGIN_SRC elisp :eval export-only :exports none :results none
(defun btw--org-html-format-drawer (name contents)
  "Turn drawers into HTML divs."
  ;; TODO: Add a class for result blocks?
  (format "<div class=\"%s\" markdown=\"\">\n%s\n</div>" (downcase name) contents))

(setq org-html-format-drawer-function #'btw--org-html-format-drawer)
#+END_SRC

#+NAME: org-latex-export-modifications
#+BEGIN_SRC elisp :eval export-only :exports none :results none
;; Don't attempt to convert the following drawers:
(setq org-latex-format-non-env-drawers '("results"))

(defun btw--org-latex-format-drawer-function (name contents)
  "Turn drawers into custom LaTeX blocks."
  (let ((name (downcase name)))
    (unless (member name org-latex-format-non-env-drawers)
      (format "\\begin{%s}\n%s\n\\end{%s}" name contents name))))

(setq org-latex-format-drawer-function #'btw--org-latex-format-drawer-function)
#+END_SRC

#+NAME: org-publish-modifications
#+BEGIN_SRC elisp :eval export-only :exports none :results none
;;
;; Add a org-publish project-specific figure directory setting
;;
(add-to-list 'org-export-options-alist '(:figure-dir "FIGURE_DIR" nil nil t))

(defun btw--org-publish-property (prop)
  "Get the publish property PROP (a tag/keyword like `:base-directory') for
the current file's project."
    (org-publish-property prop
                          (org-publish-get-project-from-filename
                           (buffer-file-name (buffer-base-buffer)))))
#+END_SRC

#+NAME: pelican-preamble
#+BEGIN_SRC elisp :eval export-only :exports results :results value raw
;;
;; Set the YAML preamble.
;;
(let* ((org-env (org-export-get-environment))
       (res '())
       (author-str
        (format "author: '%s'"
                (car (plist-get org-env ':author))))
       (res (cons author-str res))
       (date-str
        (format "date: '%s'"
                (car (plist-get org-env ':date))))
       (res (cons date-str res))
       (title-str
        (format "title: %s"
                (car (plist-get org-env ':title))))
       (res (cons title-str res))
       (tags-str (s-join "," (plist-get org-env ':filetags)))
       (tags-str (and (not (s-blank? tags-str))
                      (format "tags: '%s'" tags-str)))
       (res (or (and tags-str
                     (cons tags-str res))
                res))
       (mdate-str (calendar-current-date))
       (mdate-str (format "modified: '%s-%s-%s'"
                          (nth 2 mdate-str)
                          (nth 0 mdate-str)
                          (nth 1 mdate-str)))
       (res (or (and mdate-str
                     (cons mdate-str res))
                res))
       (bib-str (plist-get org-env ':bibliography))
       (bib-str (and bib-str
                     (format "bibliography:\n- '%s'"
                             (apply #'f-join
                                      (cdr (f-split (car bib-str)))))))
       (res (or (and bib-str
                     (cons bib-str res))
                res)))
  (print (s-join "\n"
                 (append
                  '("#+BEGIN_EXPORT html"
                    "---")
                   res
                  '("figure_dir: '{attach}/articles/figures/'"
                    "figure_ext: png"
                    "---"
                    "#+END_EXPORT")))))
#+END_SRC
